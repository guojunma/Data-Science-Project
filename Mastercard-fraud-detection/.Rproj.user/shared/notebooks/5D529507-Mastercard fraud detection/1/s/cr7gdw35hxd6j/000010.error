{"frames":[{"func":"tune(X = design_train, y = response_train, learningsets = splits, \n    classifier = rfCMA)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tune(X = design_train, y = response_train, learningsets = splits, \n    classifier = rfCMA)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tune(X, y = as.numeric(y) - 1, learningsets = learningsets, genesel = genesel, \n    genesellist = genesellist, nbgene = nbgene, classifier = classifier, \n    fold = fold, strat = strat, grids = grids, trace = trace, \n    ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tune(X, y = as.numeric(y) - 1, learningsets = learningsets, genesel = genesel, \n    genesellist = genesellist, nbgene = nbgene, classifier = classifier, \n    fold = fold, strat = strat, grids = grids, trace = trace, \n    ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"do.call(\"classification\", args = c(list(X = Xi, y = yi, learningsets = lsi, \n    trace = FALSE, classifier = classifier), as.list(data.frame(hypergrid[k, \n    , drop = FALSE])), ll))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"classification(X = structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"classification(X = structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"do.call(classifier, args = c(list(X = X, y = y, learnind = learnmatrix[i, \n    ]), ll))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(new(\"standardGeneric\", .Data = function (X, y, f, learnind, \n    varimp = TRUE, seed = 111, models = FALSE, type = 1, scale = FALSE, \n    importance = TRUE, ...) \nstandardGeneric(\"rfCMA\"), generic = structure(\"rfCMA\", package = \"CMA\"),  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(new(\"standardGeneric\", .Data = function (X, y, f, learnind, \n    varimp = TRUE, seed = 111, models = FALSE, type = 1, scale = FALSE, \n    importance = TRUE, ...) \nstandardGeneric(\"rfCMA\"), generic = structure(\"rfCMA\", package = \"CMA\"),  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"randomForest(Xlearn, y = Ylearn, importance = importance, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"randomForest.default(Xlearn, y = Ylearn, importance = importance, \n    ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error : object 'spend_location' not found\n"}